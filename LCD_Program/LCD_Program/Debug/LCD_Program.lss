
LCD_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000850  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036d  00000000  00000000  00001117  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d9  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 83 00 	call	0x106	; 0x106 <main>
  7a:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <EnableRoutine>:
}

// This function gives the Enable pulse to the LCD
void EnableRoutine(void)
{
	ControlPort |= 1 << EnablePin;    // Make EnablePin High
  82:	82 b3       	in	r24, 0x12	; 18
  84:	81 60       	ori	r24, 0x01	; 1
  86:	82 bb       	out	0x12, r24	; 18
	asm volatile ("nop");		      // "nop" will perform no operation but will consume clock cycles
  88:	00 00       	nop
	asm volatile ("nop");		      // "nop" will perform no operation but will consume clock cycles
  8a:	00 00       	nop
	ControlPort &= ~(1 << EnablePin); // Make EnablePin Low
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	8e 7f       	andi	r24, 0xFE	; 254
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <CheckBusy>:
/*******************************************Functions*************************************************/

// This function checks if the LCD is busy or not. D7 is High if LCD is busy
void CheckBusy(void)
{
	DataPortDirect = 0x00;				// Configure DataPort as I/P
  94:	17 ba       	out	0x17, r1	; 23
	ControlPort |= 1 << ReadWrite;		// Read Mode
  96:	82 b3       	in	r24, 0x12	; 18
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	82 bb       	out	0x12, r24	; 18
	ControlPort &= ~(1 << RegisterS);   // Command Mode
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	82 bb       	out	0x12, r24	; 18
	while( DataPort >= 0x80)			// To check if pin D7 is High 
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <CheckBusy+0x14>
	{
		EnableRoutine();				// Enable function
  a4:	0e 94 41 00 	call	0x82	; 0x82 <EnableRoutine>
void CheckBusy(void)
{
	DataPortDirect = 0x00;				// Configure DataPort as I/P
	ControlPort |= 1 << ReadWrite;		// Read Mode
	ControlPort &= ~(1 << RegisterS);   // Command Mode
	while( DataPort >= 0x80)			// To check if pin D7 is High 
  a8:	c7 99       	sbic	0x18, 7	; 24
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <CheckBusy+0x10>
	{
		EnableRoutine();				// Enable function
	}
	DataPortDirect = 0xFF;				// Configure DataPort as O/P
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret

000000b2 <SendCommand>:
	ControlPort &= ~(1 << EnablePin); // Make EnablePin Low
}

// This function sends a command to the LCD
void SendCommand(unsigned char command)
{
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
	CheckBusy();										// Check if LCD is busy
  b6:	0e 94 4a 00 	call	0x94	; 0x94 <CheckBusy>
	DataPort = command;									// Move the command value to the DataPort. i.e if 0xC0 is sent as command PORTB will show 0xC0;
  ba:	c8 bb       	out	0x18, r28	; 24
	ControlPort &= ~(1 << ReadWrite | 1 << RegisterS);  // Write Mode Command Mode
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	89 7f       	andi	r24, 0xF9	; 249
  c0:	82 bb       	out	0x12, r24	; 18
	EnableRoutine();									// Enable the LCD to accept the sent command 
  c2:	0e 94 41 00 	call	0x82	; 0x82 <EnableRoutine>
	DataPort = 0x00;									// Clear DataPort					
  c6:	18 ba       	out	0x18, r1	; 24
}
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <SendData>:

// This function sends a data character to the LCD
void SendData(unsigned char data_char)
{
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
	CheckBusy();							// Check if LCD is busy
  d0:	0e 94 4a 00 	call	0x94	; 0x94 <CheckBusy>
	DataPort = data_char;					// Move the data char to DataPort i.e. if character 'A' is to be moved the ASCII value for 'A' which is 0x41 is moved to PORTB
  d4:	c8 bb       	out	0x18, r28	; 24
	ControlPort &= ~(1 << ReadWrite);		// Read Mode		
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	82 bb       	out	0x12, r24	; 18
	ControlPort |= 1 << RegisterS;			// Data Mode
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	82 bb       	out	0x12, r24	; 18
	EnableRoutine();						// Enable the LCD to accept the sent data
  e2:	0e 94 41 00 	call	0x82	; 0x82 <EnableRoutine>
	DataPort = 0x00;						// Clear DataPort
  e6:	18 ba       	out	0x18, r1	; 24
}
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <Send_a_String>:

// This function sends a string of characters
void Send_a_String(char *stringofchars)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
	// *stringofchars is a pointer to the memory location containing the string
	
	while(*stringofchars > 0)
  f2:	03 c0       	rjmp	.+6      	; 0xfa <Send_a_String+0xe>
	{
		SendData(*stringofchars++);
  f4:	21 96       	adiw	r28, 0x01	; 1
  f6:	0e 94 66 00 	call	0xcc	; 0xcc <SendData>
// This function sends a string of characters
void Send_a_String(char *stringofchars)
{
	// *stringofchars is a pointer to the memory location containing the string
	
	while(*stringofchars > 0)
  fa:	88 81       	ld	r24, Y
  fc:	81 11       	cpse	r24, r1
  fe:	fa cf       	rjmp	.-12     	; 0xf4 <Send_a_String+0x8>
	{
		SendData(*stringofchars++);
	}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <main>:

/*******************************Main****************************************/

int main(void)
{
    ControlPortDirect |= ( 1 << EnablePin | 1 << ReadWrite | 1 << RegisterS); // Configure the LCD control pins as O/P
 106:	81 b3       	in	r24, 0x11	; 17
 108:	87 60       	ori	r24, 0x07	; 7
 10a:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	85 ea       	ldi	r24, 0xA5	; 165
 10e:	9e e0       	ldi	r25, 0x0E	; 14
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0xa>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x10>
 116:	00 00       	nop
	_delay_ms(15);
	
	SendCommand(0x01);			// Clear LCD Screen
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 59 00 	call	0xb2	; 0xb2 <SendCommand>
 11e:	83 ef       	ldi	r24, 0xF3	; 243
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x1c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x22>
 128:	00 00       	nop
	_delay_ms(2);
	SendCommand(0x38);			// 8 Bit mode
 12a:	88 e3       	ldi	r24, 0x38	; 56
 12c:	0e 94 59 00 	call	0xb2	; 0xb2 <SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	90 e1       	ldi	r25, 0x10	; 16
 132:	9a 95       	dec	r25
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x2c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x32>
	_delay_us(50);
	SendCommand(0b00001110);	// Set display on, cursor on
 138:	8e e0       	ldi	r24, 0x0E	; 14
 13a:	0e 94 59 00 	call	0xb2	; 0xb2 <SendCommand>
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x3a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x40>
	_delay_us(50);              // Delays are added to give LCD sufficient time to process previous instructions
	
	Send_a_String("Merry XMas and a"); // Send a String
 146:	80 e6       	ldi	r24, 0x60	; 96
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 76 00 	call	0xec	; 0xec <Send_a_String>
	SendCommand(0xC0);				   // Move Cursor to second line of 16x2 LCD
 14e:	80 ec       	ldi	r24, 0xC0	; 192
 150:	0e 94 59 00 	call	0xb2	; 0xb2 <SendCommand>
	Send_a_String("Happy New Year!");  // Send a String
 154:	81 e7       	ldi	r24, 0x71	; 113
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 76 00 	call	0xec	; 0xec <Send_a_String>
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0x56>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
