
LCD_Timer_HH_MM_SS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000312  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000312  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800078  00800078  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1c  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070a  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bd  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e8  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ab  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 87 01 	jmp	0x30e	; 0x30e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
	}
}

/**************************TIMER1_COMPA_ISR*****************************/
ISR(TIMER1_COMPA_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	int_flag = 1;         // Setting interrupt flag 
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
						  // ISR should involve minimal programming
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <EnableRoutine>:
	DataPortDirect = 0xFF;
}

void EnableRoutine(void)
{
	ControlPort |= 1 << EnablePin;
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	82 bb       	out	0x12, r24	; 18
	asm volatile ("nop");
  b6:	00 00       	nop
	asm volatile ("nop");
  b8:	00 00       	nop
	ControlPort &= ~(1 << EnablePin);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	82 bb       	out	0x12, r24	; 18
  c0:	08 95       	ret

000000c2 <CheckBusy>:
}

/**************************LCD_functions*******************************/
void CheckBusy(void)
{
	DataPortDirect = 0x00;
  c2:	17 ba       	out	0x17, r1	; 23
	ControlPort |= 1 << ReadWrite;
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	82 bb       	out	0x12, r24	; 18
	ControlPort &= ~(1 << RegisterS);
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	82 bb       	out	0x12, r24	; 18
	while( DataPort >= 0x80)
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <CheckBusy+0x14>
	{
		EnableRoutine();
  d2:	0e 94 58 00 	call	0xb0	; 0xb0 <EnableRoutine>
void CheckBusy(void)
{
	DataPortDirect = 0x00;
	ControlPort |= 1 << ReadWrite;
	ControlPort &= ~(1 << RegisterS);
	while( DataPort >= 0x80)
  d6:	c7 99       	sbic	0x18, 7	; 24
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <CheckBusy+0x10>
	{
		EnableRoutine();
	}
	DataPortDirect = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret

000000e0 <SendCommand>:
	asm volatile ("nop");
	ControlPort &= ~(1 << EnablePin);
}

void SendCommand(unsigned char command)
{
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
	CheckBusy();
  e4:	0e 94 61 00 	call	0xc2	; 0xc2 <CheckBusy>
	DataPort = command;
  e8:	c8 bb       	out	0x18, r28	; 24
	ControlPort &= ~(1 << ReadWrite | 1 << RegisterS);
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	89 7f       	andi	r24, 0xF9	; 249
  ee:	82 bb       	out	0x12, r24	; 18
	EnableRoutine();
  f0:	0e 94 58 00 	call	0xb0	; 0xb0 <EnableRoutine>
	DataPort = 0x00;
  f4:	18 ba       	out	0x18, r1	; 24
}
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <SendData>:

void SendData(unsigned char data_char)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	CheckBusy();
  fe:	0e 94 61 00 	call	0xc2	; 0xc2 <CheckBusy>
	DataPort = data_char;
 102:	c8 bb       	out	0x18, r28	; 24
	ControlPort &= ~(1 << ReadWrite);
 104:	82 b3       	in	r24, 0x12	; 18
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	82 bb       	out	0x12, r24	; 18
	ControlPort |= 1 << RegisterS;
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	82 bb       	out	0x12, r24	; 18
	EnableRoutine();
 110:	0e 94 58 00 	call	0xb0	; 0xb0 <EnableRoutine>
	DataPort = 0x00;
 114:	18 ba       	out	0x18, r1	; 24
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <Send_a_String>:
void Send_a_String(char *stringofchars)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	while(*stringofchars > 0)
 120:	03 c0       	rjmp	.+6      	; 0x128 <Send_a_String+0xe>
	{
		SendData(*stringofchars++);
 122:	21 96       	adiw	r28, 0x01	; 1
 124:	0e 94 7d 00 	call	0xfa	; 0xfa <SendData>
	EnableRoutine();
	DataPort = 0x00;
}
void Send_a_String(char *stringofchars)
{
	while(*stringofchars > 0)
 128:	88 81       	ld	r24, Y
 12a:	81 11       	cpse	r24, r1
 12c:	fa cf       	rjmp	.-12     	; 0x122 <Send_a_String+0x8>
	{
		SendData(*stringofchars++);
	}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:
void Send_a_String(char *stringofchars);

uint8_t int_flag =0;

int main(void)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	00 d0       	rcall	.+0      	; 0x13a <main+0x6>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
    ControlPortDirect |= ( 1 << EnablePin | 1 << ReadWrite | 1 << RegisterS);
 13e:	81 b3       	in	r24, 0x11	; 17
 140:	87 60       	ori	r24, 0x07	; 7
 142:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	85 ea       	ldi	r24, 0xA5	; 165
 146:	9e e0       	ldi	r25, 0x0E	; 14
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x14>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x1a>
 14e:	00 00       	nop
	_delay_ms(15);
	sei();			// Enable global interrupts
 150:	78 94       	sei
	
	SendCommand(0x01); // Clear Screen
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
 158:	83 ef       	ldi	r24, 0xF3	; 243
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x28>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x2e>
 162:	00 00       	nop
	_delay_ms(2);
	SendCommand(0x38); // 8 Bit mode
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	90 e1       	ldi	r25, 0x10	; 16
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0x38>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x3e>
	_delay_us(50);
	SendCommand(0b00001110);
 172:	8e e0       	ldi	r24, 0x0E	; 14
 174:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
 178:	80 e1       	ldi	r24, 0x10	; 16
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x46>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x4c>
		TCCR1B is a control register for TCNT1
		TIMSK is the timer/counter interrupt mask register used to enable timer interrupts
		OCR1A is the 16-bit output compare register
	*/
		
	TCCR1B |= ( 1<<CS10 | 1 << CS11 | 1 << WGM12); // CS10,CS11 are clock select bits used to set pre-scalar to 64. 
 180:	8e b5       	in	r24, 0x2e	; 46
 182:	8b 60       	ori	r24, 0x0B	; 11
 184:	8e bd       	out	0x2e, r24	; 46
												   // WGM12 enables the CTC(Clear Timer on Compare Match). Thus when the TCNT1 value matches the OCR1A value TCNT1 is reset to 0.
	TIMSK |= 1 << OCIE1A;                          // Enables the Timer/Counter1 Output Compare A Match Interrupt.
 186:	89 b7       	in	r24, 0x39	; 57
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	89 bf       	out	0x39, r24	; 57
												   // This generates an interrupt when TCNT1 matches OCR1A to execute ISR
	OCR1A = 15624;								   // Pre-scalar is 64 and clock frequency is 1MHz
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	9d e3       	ldi	r25, 0x3D	; 61
 190:	9b bd       	out	0x2b, r25	; 43
 192:	8a bd       	out	0x2a, r24	; 42
												   // 1000000/64 = 15625. So counter value will be 15624 after 1 second as counter counts from 0
	
	Send_a_String("TIMER HH:MM:SS");	// Display Timer Headings on LCD first row
 194:	80 e6       	ldi	r24, 0x60	; 96
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 8d 00 	call	0x11a	; 0x11a <Send_a_String>
	SendCommand(0xC6);					// Go to LCD second row at correct location below headings
 19c:	86 ec       	ldi	r24, 0xC6	; 198
 19e:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
	Send_a_String("00:00:00");			// Send timer initial value
 1a2:	8f e6       	ldi	r24, 0x6F	; 111
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 8d 00 	call	0x11a	; 0x11a <Send_a_String>
	
	uint8_t i = 0;		// Initialize local variables
	uint8_t j = 0;
	uint8_t k = 0;
 1aa:	f1 2c       	mov	r15, r1
	Send_a_String("TIMER HH:MM:SS");	// Display Timer Headings on LCD first row
	SendCommand(0xC6);					// Go to LCD second row at correct location below headings
	Send_a_String("00:00:00");			// Send timer initial value
	
	uint8_t i = 0;		// Initialize local variables
	uint8_t j = 0;
 1ac:	00 e0       	ldi	r16, 0x00	; 0
	
	Send_a_String("TIMER HH:MM:SS");	// Display Timer Headings on LCD first row
	SendCommand(0xC6);					// Go to LCD second row at correct location below headings
	Send_a_String("00:00:00");			// Send timer initial value
	
	uint8_t i = 0;		// Initialize local variables
 1ae:	10 e0       	ldi	r17, 0x00	; 0
		
    while (1) 
    {
		// The timer value will only refresh when ISR sets the int_flag to 1
		
		if(int_flag == 1)
 1b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x7c>
		{
			int_flag = 0;   // Reset the int_flag for next seconds interrupt
 1b8:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
			char secs[2];   // character arrays to hold the timer values
			char mins[2];
			char hrs[2];

			i++;			// incrementing 'i' the seconds counter
 1bc:	1f 5f       	subi	r17, 0xFF	; 255
			if(i < 60)	    // Updating the seconds counter
 1be:	1c 33       	cpi	r17, 0x3C	; 60
 1c0:	e8 f4       	brcc	.+58     	; 0x1fc <main+0xc8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1c2:	4a e0       	ldi	r20, 0x0A	; 10
 1c4:	be 01       	movw	r22, r28
 1c6:	6f 5f       	subi	r22, 0xFF	; 255
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	81 2f       	mov	r24, r17
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__itoa_ncheck>
			{
				itoa(i,secs,10); // itoa converts the integer data type to string data type
				
				if(i < 10)		 // if i < 10 the seconds counter has to be upended witha leading '0'
 1d2:	1a 30       	cpi	r17, 0x0A	; 10
 1d4:	58 f4       	brcc	.+22     	; 0x1ec <main+0xb8>
				{
					SendCommand(0xCC);		// Go to location of seconds on the 2nd line of the LCD
 1d6:	8c ec       	ldi	r24, 0xCC	; 204
 1d8:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
					SendData(0x30);		    // Send '0'
 1dc:	80 e3       	ldi	r24, 0x30	; 48
 1de:	0e 94 7d 00 	call	0xfa	; 0xfa <SendData>
					Send_a_String(secs);    // Send the seconds value
 1e2:	ce 01       	movw	r24, r28
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	0e 94 8d 00 	call	0x11a	; 0x11a <Send_a_String>
 1ea:	e2 cf       	rjmp	.-60     	; 0x1b0 <main+0x7c>
				}
				else
				{
								// if i > 10 the secs char array will hold the tens and units digits repectively
					SendCommand(0xCC);		// Go to location of seconds on the 2nd line of the LCD
 1ec:	8c ec       	ldi	r24, 0xCC	; 204
 1ee:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
					Send_a_String(secs);	// Send the seconds value
 1f2:	ce 01       	movw	r24, r28
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	0e 94 8d 00 	call	0x11a	; 0x11a <Send_a_String>
 1fa:	da cf       	rjmp	.-76     	; 0x1b0 <main+0x7c>
				}
			}
			else
			{
			    // Updating the minutes counter
				SendCommand(0xCC);	// Go to location of seconds on the 2nd line of the LCD
 1fc:	8c ec       	ldi	r24, 0xCC	; 204
 1fe:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
				SendData(0x30);		// Send '0'
 202:	80 e3       	ldi	r24, 0x30	; 48
 204:	0e 94 7d 00 	call	0xfa	; 0xfa <SendData>
				SendData(0x30);		// Send '0'
 208:	80 e3       	ldi	r24, 0x30	; 48
 20a:	0e 94 7d 00 	call	0xfa	; 0xfa <SendData>
				
				/* The logic for updating the minutes and hours counter from hereon remains same as with seconds */
				
				j++;		
 20e:	0f 5f       	subi	r16, 0xFF	; 255
				i=0;	// Initialize seconds counter	
				
				if(j < 59)	 
 210:	0b 33       	cpi	r16, 0x3B	; 59
 212:	f8 f4       	brcc	.+62     	; 0x252 <main+0x11e>
 214:	4a e0       	ldi	r20, 0x0A	; 10
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	80 2f       	mov	r24, r16
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__itoa_ncheck>
				{
					itoa(j,mins,10);
					if(j < 10)
 224:	0a 30       	cpi	r16, 0x0A	; 10
 226:	60 f4       	brcc	.+24     	; 0x240 <main+0x10c>
					{
						SendCommand(0xC9);
 228:	89 ec       	ldi	r24, 0xC9	; 201
 22a:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
						SendData(0x30);
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	0e 94 7d 00 	call	0xfa	; 0xfa <SendData>
						Send_a_String(mins);
 234:	ce 01       	movw	r24, r28
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	0e 94 8d 00 	call	0x11a	; 0x11a <Send_a_String>
				SendData(0x30);		// Send '0'
				
				/* The logic for updating the minutes and hours counter from hereon remains same as with seconds */
				
				j++;		
				i=0;	// Initialize seconds counter	
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	b8 cf       	rjmp	.-144    	; 0x1b0 <main+0x7c>
						SendData(0x30);
						Send_a_String(mins);
					}
					else
					{
						SendCommand(0xC9);
 240:	89 ec       	ldi	r24, 0xC9	; 201
 242:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
						Send_a_String(mins);
 246:	ce 01       	movw	r24, r28
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	0e 94 8d 00 	call	0x11a	; 0x11a <Send_a_String>
				SendData(0x30);		// Send '0'
				
				/* The logic for updating the minutes and hours counter from hereon remains same as with seconds */
				
				j++;		
				i=0;	// Initialize seconds counter	
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	af cf       	rjmp	.-162    	; 0x1b0 <main+0x7c>
						Send_a_String(mins);
					}
				}
				else
				{
					SendCommand(0xC9);
 252:	89 ec       	ldi	r24, 0xC9	; 201
 254:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
					SendData(0x30);
 258:	80 e3       	ldi	r24, 0x30	; 48
 25a:	0e 94 7d 00 	call	0xfa	; 0xfa <SendData>
					SendData(0x30);
 25e:	80 e3       	ldi	r24, 0x30	; 48
 260:	0e 94 7d 00 	call	0xfa	; 0xfa <SendData>
					k++;
 264:	f3 94       	inc	r15
 266:	4a e0       	ldi	r20, 0x0A	; 10
 268:	be 01       	movw	r22, r28
 26a:	6f 5f       	subi	r22, 0xFF	; 255
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	8f 2d       	mov	r24, r15
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__itoa_ncheck>
					j=0;   // Initialize minutes counter 
					itoa(k,hrs,10);
					if(k < 10)
 276:	99 e0       	ldi	r25, 0x09	; 9
 278:	9f 15       	cp	r25, r15
 27a:	50 f0       	brcs	.+20     	; 0x290 <main+0x15c>
					{
						SendCommand(0xC7);
 27c:	87 ec       	ldi	r24, 0xC7	; 199
 27e:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
						Send_a_String(hrs);
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	0e 94 8d 00 	call	0x11a	; 0x11a <Send_a_String>
				{
					SendCommand(0xC9);
					SendData(0x30);
					SendData(0x30);
					k++;
					j=0;   // Initialize minutes counter 
 28a:	00 e0       	ldi	r16, 0x00	; 0
				SendData(0x30);		// Send '0'
				
				/* The logic for updating the minutes and hours counter from hereon remains same as with seconds */
				
				j++;		
				i=0;	// Initialize seconds counter	
 28c:	10 e0       	ldi	r17, 0x00	; 0
 28e:	90 cf       	rjmp	.-224    	; 0x1b0 <main+0x7c>
						SendCommand(0xC7);
						Send_a_String(hrs);
					}
					else
					{
						SendCommand(0xC6);
 290:	86 ec       	ldi	r24, 0xC6	; 198
 292:	0e 94 70 00 	call	0xe0	; 0xe0 <SendCommand>
						Send_a_String(hrs);
 296:	ce 01       	movw	r24, r28
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	0e 94 8d 00 	call	0x11a	; 0x11a <Send_a_String>
				{
					SendCommand(0xC9);
					SendData(0x30);
					SendData(0x30);
					k++;
					j=0;   // Initialize minutes counter 
 29e:	00 e0       	ldi	r16, 0x00	; 0
				SendData(0x30);		// Send '0'
				
				/* The logic for updating the minutes and hours counter from hereon remains same as with seconds */
				
				j++;		
				i=0;	// Initialize seconds counter	
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	86 cf       	rjmp	.-244    	; 0x1b0 <main+0x7c>

000002a4 <__itoa_ncheck>:
 2a4:	bb 27       	eor	r27, r27
 2a6:	4a 30       	cpi	r20, 0x0A	; 10
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <__itoa_ncheck+0x12>
 2aa:	99 23       	and	r25, r25
 2ac:	22 f4       	brpl	.+8      	; 0x2b6 <__itoa_ncheck+0x12>
 2ae:	bd e2       	ldi	r27, 0x2D	; 45
 2b0:	90 95       	com	r25
 2b2:	81 95       	neg	r24
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__utoa_common>

000002ba <__utoa_ncheck>:
 2ba:	bb 27       	eor	r27, r27

000002bc <__utoa_common>:
 2bc:	fb 01       	movw	r30, r22
 2be:	55 27       	eor	r21, r21
 2c0:	aa 27       	eor	r26, r26
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	aa 1f       	adc	r26, r26
 2c8:	a4 17       	cp	r26, r20
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <__utoa_common+0x14>
 2cc:	a4 1b       	sub	r26, r20
 2ce:	83 95       	inc	r24
 2d0:	50 51       	subi	r21, 0x10	; 16
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <__utoa_common+0x6>
 2d4:	a0 5d       	subi	r26, 0xD0	; 208
 2d6:	aa 33       	cpi	r26, 0x3A	; 58
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <__utoa_common+0x20>
 2da:	a9 5d       	subi	r26, 0xD9	; 217
 2dc:	a1 93       	st	Z+, r26
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	79 f7       	brne	.-34     	; 0x2c0 <__utoa_common+0x4>
 2e2:	b1 11       	cpse	r27, r1
 2e4:	b1 93       	st	Z+, r27
 2e6:	11 92       	st	Z+, r1
 2e8:	cb 01       	movw	r24, r22
 2ea:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <strrev>

000002ee <strrev>:
 2ee:	dc 01       	movw	r26, r24
 2f0:	fc 01       	movw	r30, r24
 2f2:	67 2f       	mov	r22, r23
 2f4:	71 91       	ld	r23, Z+
 2f6:	77 23       	and	r23, r23
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <strrev+0x4>
 2fa:	32 97       	sbiw	r30, 0x02	; 2
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <strrev+0x18>
 2fe:	7c 91       	ld	r23, X
 300:	6d 93       	st	X+, r22
 302:	70 83       	st	Z, r23
 304:	62 91       	ld	r22, -Z
 306:	ae 17       	cp	r26, r30
 308:	bf 07       	cpc	r27, r31
 30a:	c8 f3       	brcs	.-14     	; 0x2fe <strrev+0x10>
 30c:	08 95       	ret

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
