
PushButton_LED_Toggle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fc  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include <avr/sfr_defs.h>	// Header file containing the bit_is_clear() function

int main(void)
{
	DDRB |= 1 << PINB0;		// Configure PINB0 as O/P i.e. LED1
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	87 bb       	out	0x17, r24	; 23
	DDRB |= 1 << PINB2;		// Configure PINB2 as O/P i.e. LED2
  72:	87 b3       	in	r24, 0x17	; 23
  74:	84 60       	ori	r24, 0x04	; 4
  76:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB1);	// Configure PINB1 as I/P i.e. Push Button
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	8d 7f       	andi	r24, 0xFD	; 253
  7c:	87 bb       	out	0x17, r24	; 23
	PORTB |= 1 << PINB1;	// Make PINB1 High
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	82 60       	ori	r24, 0x02	; 2
  82:	88 bb       	out	0x18, r24	; 24
	
	while (1)
	{
		if(bit_is_clear(PINB, 1))	// Function bit_is_clear will return True if PINB1 is read as '0' i.e. Button is pushed
  84:	b1 99       	sbic	0x16, 1	; 22
  86:	08 c0       	rjmp	.+16     	; 0x98 <main+0x2c>
		{
			//LED2 will keep toggling if Button is pushed
			PORTB &= ~(1 << PINB0); // Make PINB0 Low
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	88 bb       	out	0x18, r24	; 24
			PORTB ^= 1 << PINB2;    // Toggle PINB2
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	89 27       	eor	r24, r25
  94:	88 bb       	out	0x18, r24	; 24
  96:	07 c0       	rjmp	.+14     	; 0xa6 <main+0x3a>
		}
		else
		{
			//LED1 will keep toggling if Button is not pressed
			PORTB &= ~(1 << PINB2); // Make PINB2 Low
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	88 bb       	out	0x18, r24	; 24
			PORTB ^= 1 << PINB0;	// Toggle PINB0;
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	87 ea       	ldi	r24, 0xA7	; 167
  a8:	91 e6       	ldi	r25, 0x61	; 97
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x3e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
  b2:	e8 cf       	rjmp	.-48     	; 0x84 <main+0x18>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
